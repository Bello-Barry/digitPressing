#!/data/data/com.termux/files/usr/bin/bash

# Activer l'export automatique des variables
set -o allexport

# Charger les variables depuis plusieurs sources possibles
if [ -f .env ]; then
    echo "üìÑ Chargement depuis .env"
    source .env
elif [ -f .env.local ]; then
    echo "üìÑ Chargement depuis .env.local"
    source .env.local
elif [ -f .env.example.backup ]; then
    echo "üìÑ Chargement depuis .env.example.backup"
    source .env.example.backup
else
    echo "‚ö†Ô∏è  Aucun fichier de configuration trouv√©."
fi

# D√©sactiver l'export automatique
set +o allexport

# üîí Demander le token interactivement s'il n'est pas d√©fini
if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå GITHUB_TOKEN non trouv√© dans les fichiers de configuration."
    echo "üîë Veuillez saisir votre token GitHub :"
    read -s GITHUB_TOKEN
    
    if [ -z "$GITHUB_TOKEN" ]; then
        echo "‚ùå Token vide. Abandon."
        exit 1
    fi
    
    # Optionnel: sauvegarder dans .env pour les prochaines fois
    read -p "üíæ Voulez-vous sauvegarder ce token dans .env ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" > .env
        echo "‚úÖ Token sauvegard√© dans .env"
    fi
fi

# V√©rifier que le token a le bon format
if [[ ! "$GITHUB_TOKEN" =~ ^(ghp_|github_pat_) ]]; then
    echo "‚ö†Ô∏è  Le token ne semble pas avoir le bon format (devrait commencer par ghp_ ou github_pat_)"
    read -p "Continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# ‚úÖ Variables du projet
GITHUB_USERNAME="Bello-Barry"
REPO_NAME="digitPressing"
PROJECT_DIR="/data/data/com.termux/files/home/digit-pressing"

# Aller dans le projet
cd "$PROJECT_DIR" || { echo "‚ùå Erreur : dossier $PROJECT_DIR introuvable"; exit 1; }

# Initialiser Git si n√©cessaire
[ -d .git ] || git init

# Cr√©er un README si absent
[ -f README.md ] || echo "# $REPO_NAME" > README.md

# Ajouter tous les fichiers
git add .

# Faire un commit (m√™me s'il n'y a rien √† committer, ignorer l'erreur)
git commit -m "Ajout de tous les fichiers du projet" || echo "‚ÑπÔ∏è  Rien √† committer"

# Cr√©er ou forcer la branche main
git branch -M main

# Ajouter le remote origin si absent
git remote get-url origin >/dev/null 2>&1 || \
  git remote add origin https://github.com/${GITHUB_USERNAME}/${REPO_NAME}.git

# D√©finir l'URL avec token pour push
git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/${REPO_NAME}.git

# Fonction pour tenter le push
attempt_push() {
    echo "üöÄ Tentative de push..."
    if git push -u origin main 2>/dev/null; then
        echo "‚úÖ Push r√©ussi!"
        return 0
    else
        return 1
    fi
}

# Fonction pour synchroniser avec le distant
sync_with_remote() {
    echo "üîÑ Synchronisation avec le repository distant..."
    git fetch origin 2>/dev/null || {
        echo "‚ö†Ô∏è Impossible de fetch. Repository peut-√™tre vide."
        return 1
    }
    
    if git pull origin main --allow-unrelated-histories --no-edit 2>/dev/null; then
        echo "‚úÖ Synchronisation r√©ussie"
        return 0
    else
        echo "‚ö†Ô∏è Conflits d√©tect√©s ou synchronisation impossible"
        return 1
    fi
}

# Test de connexion GitHub
echo "üîç Test de connexion GitHub..."
if curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user >/dev/null; then
    echo "‚úÖ Token valide"
else
    echo "‚ùå Token invalide ou connexion impossible"
    echo "üîß V√©rifiez votre token sur: https://github.com/settings/tokens"
    exit 1
fi

# Strat√©gie de push intelligente
echo "üì§ D√©but du processus de push..."

# Tentative 1: Push direct
if attempt_push; then
    echo "üéâ Push direct r√©ussi!"
elif sync_with_remote && attempt_push; then
    echo "üéâ Push r√©ussi apr√®s synchronisation!"
else
    # Demander confirmation pour push forc√©
    echo "‚ö†Ô∏è Push normal impossible. Options disponibles:"
    echo "1. Push forc√© (√©crase l'historique distant)"
    echo "2. Annuler et r√©soudre manuellement"
    
    read -p "Choisissez (1/2): " -n 1 -r choice
    echo
    
    case $choice in
        1)
            echo "üî• Push forc√© en cours..."
            if git push -f origin main; then
                echo "‚úÖ Push forc√© r√©ussi!"
            else
                echo "‚ùå √âchec du push forc√©. Erreur d'authentification."
                exit 1
            fi
            ;;
        2)
            echo "‚ùå Push annul√©. R√©solvez les conflits manuellement avec:"
            echo "   git pull origin main --allow-unrelated-histories"
            echo "   # R√©soudre les conflits"
            echo "   git push origin main"
            exit 1
            ;;
        *)
            echo "‚ùå Choix invalide. Abandon."
            exit 1
            ;;
    esac
fi

# Nettoyage : remettre l'URL sans token
git remote set-url origin https://github.com/${GITHUB_USERNAME}/${REPO_NAME}.git

echo "‚úÖ Processus termin√© avec succ√®s!"
echo "üåê Repository: https://github.com/${GITHUB_USERNAME}/${REPO_NAME}"